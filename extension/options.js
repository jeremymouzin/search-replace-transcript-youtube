/* globals chrome, document */

const wordsList = document.getElementById('words-list');
const autosaveMessage = document.getElementById('autosave');
const addButton = document.getElementById('add');

// ğŸ‡«ğŸ‡· Sauvegarde la liste de mots dans le stockage local grÃ¢ce Ã  l'API chrome.storage
// ğŸ‡¬ğŸ‡§ Save words list into local storage through chrome.storage API
function saveOptions() {
  const list = document.querySelectorAll('li');

  if (list.length > 0) {
    const optionsToSave = {
      wordsList: [],
    };

    for (const item of list) {
      const [searchExpression, replacementExpression] = item.children;
      // ğŸ‡«ğŸ‡· Sauvegarde uniquement les lignes non vides
      // ğŸ‡¬ğŸ‡§ Save only non empty lines
      if (searchExpression.value.length || replacementExpression.value.length) {
        optionsToSave.wordsList.push([searchExpression.value, replacementExpression.value]);
      }
    }

    chrome.storage.sync.set(optionsToSave);
  } else {
    // ğŸ‡«ğŸ‡· S'il n'y a aucun mot dans la liste, supprimer tout du stockage
    // ğŸ‡¬ğŸ‡§ If there is no words in the list, delete everything from the storage
    chrome.storage.sync.set({ wordsList: [] });
  }

  autosaveMessage.classList.remove('saving');
  autosaveMessage.textContent = 'Done';
}

// ğŸ‡«ğŸ‡· Restaure la liste de mots depuis le stockage local
// ğŸ‡¬ğŸ‡§ Restores the words list from the local storage
function restoreOptions() {
  chrome.storage.sync.get({
    wordsList: [],
  }, (items) => {
    // ğŸ‡«ğŸ‡· S'il n'y a aucun mot de stockÃ©...
    // ğŸ‡¬ğŸ‡§ If there is no stored word...
    if (items.wordsList.length <= 0) {
      // ğŸ‡«ğŸ‡· UX: Ajouter une ligne vide pour faciliter la saisie
      // ğŸ‡¬ğŸ‡§ UX: Add an empty line to facilitate input
      insertNewExpression();
      // ğŸ‡«ğŸ‡· UX: Focus sur le premier input pour que l'utilisateur puisse taper immÃ©diatement son mot
      // ğŸ‡¬ğŸ‡§ UX: Focus on the first input so the user can start typing right away his word
      wordsList.firstElementChild.firstElementChild.focus();
    } else {
      // ğŸ‡«ğŸ‡· S'il y a des mots stockÃ©s, on les ajoute Ã  la liste
      // ğŸ‡¬ğŸ‡§ If there are stored words, we add them to the list
      for (const [searchExpression, replacementExpression] of items.wordsList) {
        insertNewExpression(searchExpression, replacementExpression, 'beforeend');
      }
    }
  });
}

let keyboardTimeoutId = 0;

// ğŸ‡«ğŸ‡· Notifie et initie la sauvegarde des donnÃ©es aprÃ¨s un dÃ©lai
// ğŸ‡¬ğŸ‡§ Notify and initiate the data saving after a delay
function initSave() {
  clearTimeout(keyboardTimeoutId);
  autosaveMessage.classList.add('saving');
  autosaveMessage.textContent = 'Saving modifications...';
  keyboardTimeoutId = setTimeout(saveOptions, 500);
}

// ğŸ‡«ğŸ‡· Restaure les options dÃ¨s que la page est complÃ¨tement chargÃ©e
// ğŸ‡¬ğŸ‡§ Restores options as soon as the page is loaded
document.addEventListener('DOMContentLoaded', restoreOptions);

// ğŸ‡«ğŸ‡· GÃ¨re le gros bouton plus pour ajouter une nouvelle ligne
// ğŸ‡¬ğŸ‡§ Manage big plus button to add a new line
addButton.addEventListener('click', () => {
  insertEmptyExpression();
});

// ğŸ‡«ğŸ‡· GÃ¨re les boutons de suppression
// ğŸ‡¬ğŸ‡§ Manage delete buttons
wordsList.addEventListener('click', (e) => {
  if (e.target.matches('.trash-icon')) {
    e.target.parentElement.remove();
    initSave();
  }
});

// ğŸ‡«ğŸ‡· UX: Sauvegarde automatiquement aprÃ¨s avoir tapÃ© une touche
// ğŸ‡¬ğŸ‡§ UX: Autosave after hitting a key
wordsList.addEventListener('keydown', (event) => {
  // ğŸ‡«ğŸ‡· Ne sauvegarde pas quand on se dÃ©place juste avec le clavier
  // ğŸ‡¬ğŸ‡§ Don't save when moving around with the keyboard
  if (event.code !== 'Tab' && event.key !== 'Shift' && event.code !== 'Enter') {
    initSave();
  }

  // ğŸ‡«ğŸ‡· UX: Facilite le processus d'Ã©dition grÃ¢ce Ã  la toucher ENTREE (pour Ã©viter de toucher la souris)
  // ğŸ‡¬ğŸ‡§ UX: Ease the editing process with the use of ENTER key (avoid touching the mouse)
  if (event.code === 'Enter') {
    if (event.target.matches('input[name="replacement-expression"]')) {
      // ğŸ‡«ğŸ‡· Si tu Ã©dites l'expression de remplacement de la derniÃ¨re ligne et tape ENTREE Ã§a ajoutera une nouvelle ligne
      // ğŸ‡¬ğŸ‡§ If you edit the last line replacement expression and type ENTER it will add a new empty line
      if (event.target.parentElement === wordsList.lastElementChild
        || event.target.parentElement === wordsList.firstElementChild) {
        insertEmptyExpression();
      } else {
        // ğŸ‡«ğŸ‡· Si on n'est pas sur la derniÃ¨re ligne, sÃ©lectionne et focus sur l'expression de recherche de la ligne suivante
        // ğŸ‡¬ğŸ‡§ If you're not on the last line, select and focus on the next line search expression
        event.target.parentElement.nextElementSibling.firstElementChild.select();
      }
    }

    if (event.target.matches('input[name="search-expression"]')) {
      // ğŸ‡«ğŸ‡· Taper ENTREE quand on Ã©dite l'expression de recherche nous fait bouger sur l'expression de remplacement
      // ğŸ‡¬ğŸ‡§ Typing ENTER when editing a search expression will move you to the replacement expression
      event.target.nextElementSibling.select();
    }
  }
});

// ğŸ‡«ğŸ‡· Ajoute une ligne vide ou une expression dÃ©jÃ  sauvegardÃ©e prÃ©cÃ©demment
// ğŸ‡¬ğŸ‡§ Add an empty line or an expression that was already saved previously
function insertNewExpression(searchExpression = '', replacementExpression = '', position = 'afterbegin') {
  wordsList.insertAdjacentHTML(position, `
<li>
  <input type="text" placeholder="Search expression" value="${searchExpression}" name="search-expression"/>
  â†’
  <input type="text" placeholder="Replacement" value="${replacementExpression}" name="replacement-expression"/><button class="fas fa-trash trash-icon" tabindex="0"></button>
</li>
  `);
}

// ğŸ‡«ğŸ‡· UX: Focus immÃ©diatement sur l'expression de recherche pour Ã©conomiser un clic de souris
// ğŸ‡¬ğŸ‡§ UX: Focus immediately on the search expression to save one mouse click
function insertEmptyExpression() {
  insertNewExpression();
  wordsList.firstElementChild.firstElementChild.focus();
}
